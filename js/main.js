/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var e="(prefers-reduced-motion: reduce)",n={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function o(t){t.length=0}function i(t,e,n){return Array.prototype.slice.call(t,e,n)}function r(t){return t.bind.apply(t,[null].concat(i(arguments,1)))}var c=setTimeout,a=function(){};function s(t){return requestAnimationFrame(t)}function u(t,e){return typeof e===t}function l(t){return!p(t)&&u("object",t)}var d=Array.isArray,f=r(u,"function"),v=r(u,"string"),m=r(u,"undefined");function p(t){return null===t}function h(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function g(t){return d(t)?t:[t]}function y(t,e){g(t).forEach(e)}function w(t,e){return t.indexOf(e)>-1}function b(t,e){return t.push.apply(t,g(e)),t}function E(t,e,n){t&&y(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function S(t,e){E(t,v(e)?e.split(" "):e,!0)}function L(t,e){y(e,t.appendChild.bind(t))}function x(t,e){y(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function k(t,e){return h(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function _(t,e){var n=t?i(t.children):[];return e?n.filter((function(t){return k(t,e)})):n}function P(t,e){return e?_(t,e)[0]:t.firstElementChild}var C=Object.keys;function A(t,e,n){return t&&(n?C(t).reverse():C(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function T(t){return i(arguments,1).forEach((function(e){A(e,(function(n,o){t[o]=e[o]}))})),t}function M(t){return i(arguments,1).forEach((function(e){A(e,(function(e,n){d(e)?t[n]=e.slice():l(e)?t[n]=M({},l(t[n])?t[n]:{},e):t[n]=e}))})),t}function D(t,e){y(e||C(t),(function(e){delete t[e]}))}function I(t,e){y(t,(function(t){y(e,(function(e){t&&t.removeAttribute(e)}))}))}function q(t,e,n){l(e)?A(e,(function(e,n){q(t,n,e)})):y(t,(function(t){p(n)||""===n?I(t,e):t.setAttribute(e,String(n))}))}function N(t,e,n){var o=document.createElement(t);return e&&(v(e)?S(o,e):q(o,e)),n&&L(n,o),o}function O(t,e,n){if(m(n))return getComputedStyle(t)[e];p(n)||(t.style[e]=""+n)}function z(t,e){O(t,"display",e)}function W(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function B(t,e){return t.getAttribute(e)}function F(t,e){return t&&t.classList.contains(e)}function R(t){return t.getBoundingClientRect()}function H(t){y(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function Y(t){return P((new DOMParser).parseFromString(t,"text/html").body)}function j(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function X(t,e){return t&&t.querySelector(e)}function V(t,e){return e?i(t.querySelectorAll(e)):[]}function $(t,e){E(t,e,!1)}function G(t){return t.timeStamp}function U(t){return v(t)?t:t?t+"px":""}var K="splide",Q="data-"+K;function J(t,e){if(!t)throw new Error("["+K+"] "+(e||""))}var Z=Math.min,tt=Math.max,et=Math.floor,nt=Math.ceil,ot=Math.abs;function it(t,e,n){return ot(t-e)<n}function rt(t,e,n,o){var i=Z(e,n),r=tt(e,n);return o?i<t&&t<r:i<=t&&t<=r}function ct(t,e,n){var o=Z(e,n),i=tt(e,n);return Z(tt(o,t),i)}function at(t){return+(t>0)-+(t<0)}function st(t,e){return y(e,(function(e){t=t.replace("%s",""+e)})),t}function ut(t){return t<10?"0"+t:""+t}var lt={};function dt(){var t=[];function e(t,e,n){y(t,(function(t){t&&y(e,(function(e){e.split(" ").forEach((function(e){var o=e.split(".");n(t,o[0],o[1])}))}))}))}return{bind:function(n,o,i,r){e(n,o,(function(e,n,o){var c="addEventListener"in e,a=c?e.removeEventListener.bind(e,n,i,r):e.removeListener.bind(e,i);c?e.addEventListener(n,i,r):e.addListener(i),t.push([e,n,o,i,a])}))},unbind:function(n,o,i){e(n,o,(function(e,n,o){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==o||i&&t[3]!==i)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var o;return"function"==typeof CustomEvent?o=new CustomEvent(e,{bubbles:!0,detail:n}):(o=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(o),o},destroy:function(){t.forEach((function(t){t[4]()})),o(t)}}}var ft="mounted",vt="ready",mt="move",pt="moved",ht="click",gt="refresh",yt="updated",wt="resize",bt="resized",Et="scroll",St="scrolled",Lt="destroy",xt="navigation:mounted",kt="autoplay:play",_t="autoplay:pause",Pt="lazyload:loaded",Ct="ei";function At(t){var e=t?t.event.bus:document.createDocumentFragment(),n=dt();return t&&t.event.on(Lt,n.destroy),T(n,{bus:e,on:function(t,o){n.bind(e,g(t).join(" "),(function(t){o.apply(o,d(t.detail)?t.detail:[])}))},off:r(n.unbind,e),emit:function(t){n.dispatch(e,t,i(arguments,1))}})}function Tt(t,e,n,o){var i,r,c=Date.now,a=0,u=!0,l=0;function d(){if(!u){if(a=t?Z((c()-i)/t,1):1,n&&n(a),a>=1&&(e(),i=c(),o&&++l>=o))return f();r=s(d)}}function f(){u=!0}function v(){r&&cancelAnimationFrame(r),a=0,r=0,u=!0}return{start:function(e){e||v(),i=c()-(e?a*t:0),u=!1,r=s(d)},rewind:function(){i=c(),a=0,n&&n(a)},pause:f,cancel:v,set:function(e){t=e},isPaused:function(){return u}}}var Mt="Arrow",Dt=Mt+"Left",It=Mt+"Right",qt=Mt+"Up",Nt=Mt+"Down",Ot="ttb",zt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[qt,It],ArrowRight:[Nt,Dt]};var Wt="role",Bt="tabindex",Ft="aria-",Rt=Ft+"controls",Ht=Ft+"current",Yt=Ft+"selected",jt=Ft+"label",Xt=Ft+"labelledby",Vt=Ft+"hidden",$t=Ft+"orientation",Gt=Ft+"roledescription",Ut=Ft+"live",Kt=Ft+"busy",Qt=Ft+"atomic",Jt=[Wt,Bt,"disabled",Rt,Ht,jt,Xt,Vt,$t,Gt],Zt=K+"__",te="is-",ee=K,ne=Zt+"track",oe=Zt+"list",ie=Zt+"slide",re=ie+"--clone",ce=ie+"__container",ae=Zt+"arrows",se=Zt+"arrow",ue=se+"--prev",le=se+"--next",de=Zt+"pagination",fe=de+"__page",ve=Zt+"progress__bar",me=Zt+"toggle",pe=Zt+"sr",he=te+"initialized",ge=te+"active",ye=te+"prev",we=te+"next",be=te+"visible",Ee=te+"loading",Se=te+"focus-in",Le=te+"overflow",xe=[ge,be,ye,we,Ee,Se,Le],ke={slide:ie,clone:re,arrows:ae,arrow:se,prev:ue,next:le,pagination:de,page:fe,spinner:Zt+"spinner"},_e="touchstart mousedown",Pe="touchmove mousemove",Ce="touchend touchcancel mouseup click",Ae="slide",Te="loop",Me="fade";var De=Q+"-interval",Ie={passive:!1,capture:!0},qe={Spacebar:" ",Right:It,Left:Dt,Up:qt,Down:Nt};function Ne(t){return t=v(t)?t:t.key,qe[t]||t}var Oe="keydown",ze=Q+"-lazy",We=ze+"-srcset",Be="["+ze+"], ["+We+"]",Fe=[" ","Enter"],Re=Object.freeze({__proto__:null,Media:function(t,n,o){var i=t.state,r=o.breakpoints||{},c=o.reducedMotion||{},a=dt(),s=[];function u(t){t&&a.destroy()}function l(t,e){var n=matchMedia(e);a.bind(n,"change",d),s.push([t,n])}function d(){var e=i.is(7),n=o.direction,r=s.reduce((function(t,e){return M(t,e[1].matches?e[0]:{})}),{});D(o),f(r),o.destroy?t.destroy("completely"===o.destroy):e?(u(!0),t.mount()):n!==o.direction&&t.refresh()}function f(e,n,r){M(o,e),n&&M(Object.getPrototypeOf(o),e),!r&&i.is(1)||t.emit(yt,o)}return{setup:function(){var t="min"===o.mediaQuery;C(r).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(r[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(c,e),d()},destroy:u,reduce:function(t){matchMedia(e).matches&&(t?M(o,c):D(o,C(c)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,o){var i="rtl"!==(o=o||n.direction)||e?o===Ot?0:-1:1;return zt[t]&&zt[t][i]||t.replace(/width|left|right/i,(function(t,e){var n=zt[t.toLowerCase()][i]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var i,r,c,a=At(t),s=a.on,u=a.bind,l=t.root,d=n.i18n,v={},m=[],p=[],h=[];function g(){var t,e,o;i=L("."+ne),r=P(i,"."+oe),J(i&&r,"A track/list element is missing."),b(m,_(r,"."+ie+":not(."+re+")")),A({arrows:ae,pagination:de,prev:ue,next:le,bar:ve,toggle:me},(function(t,e){v[e]=L("."+t)})),T(v,{root:l,track:i,list:r,slides:m}),e=l.id||""+(t=K)+ut(lt[t]=(lt[t]||0)+1),o=n.role,l.id=e,i.id=i.id||e+"-track",r.id=r.id||e+"-list",!B(l,Wt)&&"SECTION"!==l.tagName&&o&&q(l,Wt,o),q(l,Gt,d.carousel),q(r,Wt,"presentation"),w()}function y(t){var e=Jt.concat("style");o(m),$(l,p),$(i,h),I([i,r],e),I(l,t?e:["style",Gt])}function w(){$(l,p),$(i,h),p=x(ee),h=x(ne),S(l,p),S(i,h),q(l,jt,n.label),q(l,Xt,n.labelledby)}function L(t){var e=X(l,t);return e&&function(t,e){if(f(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!k(n,e);)n=n.parentElement;return n}(e,"."+ee)===l?e:void 0}function x(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===ee&&ge]}return T(v,{setup:g,mount:function(){s(gt,y),s(gt,g),s(yt,w),u(document,_e+" keydown",(function(t){c="keydown"===t.type}),{capture:!0}),u(l,"focusin",(function(){E(l,Se,!!c)}))},destroy:y})},Slides:function(t,e,n){var i=At(t),c=i.on,a=i.emit,s=i.bind,u=e.Elements,l=u.slides,d=u.list,m=[];function p(){l.forEach((function(t,e){_(t,e,-1)}))}function b(){A((function(t){t.destroy()})),o(m)}function _(e,n,o){var i=function(t,e,n,o){var i,c=At(t),a=c.on,s=c.emit,u=c.bind,l=t.Components,d=t.root,f=t.options,v=f.isNavigation,m=f.updateOnMove,p=f.i18n,h=f.pagination,g=f.slideFocus,y=l.Direction.resolve,w=B(o,"style"),b=B(o,jt),S=n>-1,L=P(o,"."+ce);function x(){var i=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");q(o,jt,st(p.slideX,(S?n:e)+1)),q(o,Rt,i),q(o,Wt,g?"button":""),g&&I(o,Gt)}function k(){i||_()}function _(){if(!i){var n=t.index;(r=C())!==F(o,ge)&&(E(o,ge,r),q(o,Ht,v&&r||""),s(r?"active":"inactive",A)),function(){var e=function(){if(t.is(Me))return C();var e=R(l.Elements.track),n=R(o),i=y("left",!0),r=y("right",!0);return et(e[i])<=nt(n[i])&&et(n[r])<=nt(e[r])}(),n=!e&&(!C()||S);if(t.state.is([4,5])||q(o,Vt,n||""),q(V(o,f.focusableNodes||""),Bt,n?-1:""),g&&q(o,Bt,n?-1:0),e!==F(o,be)&&(E(o,be,e),s(e?"visible":"hidden",A)),!e&&document.activeElement===o){var i=l.Slides.getAt(t.index);i&&W(i.slide)}}(),E(o,ye,e===n-1),E(o,we,e===n+1)}var r}function C(){var o=t.index;return o===e||f.cloneStatus&&o===n}var A={index:e,slideIndex:n,slide:o,container:L,isClone:S,mount:function(){S||(o.id=d.id+"-slide"+ut(e+1),q(o,Wt,h?"tabpanel":"group"),q(o,Gt,p.slide),q(o,jt,b||st(p.slideLabel,[e+1,t.length]))),u(o,"click",r(s,ht,A)),u(o,"keydown",r(s,"sk",A)),a([pt,"sh",St],_),a(xt,x),m&&a(mt,k)},destroy:function(){i=!0,c.destroy(),$(o,xe),I(o,Jt),q(o,"style",w),q(o,jt,b||"")},update:_,style:function(t,e,n){O(n&&L||o,t,e)},isWithin:function(n,o){var i=ot(n-e);return S||!f.rewind&&!t.is(Te)||(i=Z(i,t.length-i)),i<=o}};return A}(t,n,o,e);i.mount(),m.push(i),m.sort((function(t,e){return t.index-e.index}))}function C(t){return t?T((function(t){return!t.isClone})):m}function A(t,e){C(e).forEach(t)}function T(t){return m.filter(f(t)?t:function(e){return v(t)?k(e.slide,t):w(g(t),e.index)})}return{mount:function(){p(),c(gt,b),c(gt,p)},destroy:b,update:function(){A((function(t){t.update()}))},register:_,get:C,getIn:function(t){var o=e.Controller,i=o.toIndex(t),r=o.hasFocus()?1:n.perPage;return T((function(t){return rt(t.index,i,i+r-1)}))},getAt:function(t){return T(t)[0]},add:function(t,e){y(t,(function(t){if(v(t)&&(t=Y(t)),h(t)){var o=l[e];o?x(t,o):L(d,t),S(t,n.classes.slide),i=t,c=r(a,wt),u=V(i,"img"),(f=u.length)?u.forEach((function(t){s(t,"load error",(function(){--f||c()}))})):c()}var i,c,u,f})),a(gt)},remove:function(t){H(T(t).map((function(t){return t.slide}))),a(gt)},forEach:A,filter:T,style:function(t,e,n){A((function(o){o.style(t,e,n)}))},getLength:function(t){return t?l.length:m.length},isEnough:function(){return m.length>n.perPage}}},Layout:function(t,e,n){var o,i,c,a=At(t),s=a.on,u=a.bind,d=a.emit,f=e.Slides,v=e.Direction.resolve,m=e.Elements,p=m.root,h=m.track,g=m.list,y=f.getAt,w=f.style;function b(){o=n.direction===Ot,O(p,"maxWidth",U(n.width)),O(h,v("paddingLeft"),L(!1)),O(h,v("paddingRight"),L(!0)),S(!0)}function S(t){var e,r=R(p);(t||i.width!==r.width||i.height!==r.height)&&(O(h,"height",(e="",o&&(J(e=x(),"height or heightRatio is missing."),e="calc("+e+" - "+L(!1)+" - "+L(!0)+")"),e)),w(v("marginRight"),U(n.gap)),w("width",n.autoWidth?null:U(n.fixedWidth)||(o?"":k())),w("height",U(n.fixedHeight)||(o?n.autoHeight?null:k():x()),!0),i=r,d(bt),c!==(c=M())&&(E(p,Le,c),d("overflow",c)))}function L(t){var e=n.padding,o=v(t?"right":"left");return e&&U(e[o]||(l(e)?0:e))||"0px"}function x(){return U(n.height||R(g).width*n.heightRatio)}function k(){var t=U(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function _(){return R(g)[v("width")]}function P(t,e){var n=y(t||0);return n?R(n.slide)[v("width")]+(e?0:T()):0}function C(t,e){var n=y(t);if(n){var o=R(n.slide)[v("right")],i=R(g)[v("left")];return ot(o-i)+(e?0:T())}return 0}function A(e){return C(t.length-1)-C(0)+P(0,e)}function T(){var t=y(0);return t&&parseFloat(O(t.slide,v("marginRight")))||0}function M(){return t.is(Me)||A(!0)>_()}return{mount:function(){var t,e;b(),u(window,"resize load",(t=r(d,wt),e=Tt(0,t,null,1),function(){e.isPaused()&&e.start()})),s([yt,gt],b),s(wt,S)},resize:S,listSize:_,slideSize:P,sliderSize:A,totalSize:C,getPadding:function(t){return parseFloat(O(h,v("padding"+(t?"Right":"Left"))))||0},isOverflow:M}},Clones:function(t,e,n){var i,r=At(t),c=r.on,a=e.Elements,s=e.Slides,u=e.Direction.resolve,l=[];function d(){c(gt,f),c([yt,wt],p),(i=h())&&(function(e){var o=s.get().slice(),i=o.length;if(i){for(;o.length<e;)b(o,o);b(o.slice(-e),o.slice(0,e)).forEach((function(r,c){var u=c<e,d=function(e,o){var i=e.cloneNode(!0);return S(i,n.classes.clone),i.id=t.root.id+"-clone"+ut(o+1),i}(r.slide,c);u?x(d,o[0].slide):L(a.list,d),b(l,d),s.register(d,c-e+(u?0:i),r.index)}))}}(i),e.Layout.resize(!0))}function f(){v(),d()}function v(){H(l),o(l),r.destroy()}function p(){var t=h();i!==t&&(i<t||!t)&&r.emit(gt)}function h(){var o=n.clones;if(t.is(Te)){if(m(o)){var i=n[u("fixedWidth")]&&e.Layout.slideSize(0);o=i&&nt(R(a.track)[u("width")]/i)||n[u("autoWidth")]&&t.length||2*n.perPage}}else o=0;return o}return{mount:d,destroy:v}},Move:function(t,e,n){var o,i=At(t),r=i.on,c=i.emit,a=t.state.set,s=e.Layout,u=s.slideSize,l=s.getPadding,d=s.totalSize,f=s.listSize,v=s.sliderSize,p=e.Direction,h=p.resolve,g=p.orient,y=e.Elements,w=y.list,b=y.track;function E(){e.Controller.isBusy()||(e.Scroll.cancel(),S(t.index),e.Slides.update())}function S(t){L(P(t,!0))}function L(n,o){if(!t.is(Me)){var i=o?n:function(n){if(t.is(Te)){var o=_(n),i=o>e.Controller.getEnd();(o<0||i)&&(n=x(n,i))}return n}(n);O(w,"transform","translate"+h("X")+"("+i+"px)"),n!==i&&c("sh")}}function x(t,e){var n=t-A(e),o=v();return t-g(o*(nt(ot(n)/o)||1))*(e?1:-1)}function k(){L(C(),!0),o.cancel()}function _(t){for(var n=e.Slides.get(),o=0,i=1/0,r=0;r<n.length;r++){var c=n[r].index,a=ot(P(c,!0)-t);if(!(a<=i))break;i=a,o=c}return o}function P(e,o){var i=g(d(e-1)-function(t){var e=n.focus;return"center"===e?(f()-u(t,!0))/2:+e*u(t)||0}(e));return o?function(e){return n.trimSpace&&t.is(Ae)&&(e=ct(e,0,g(v(!0)-f()))),e}(i):i}function C(){var t=h("left");return R(w)[t]-R(b)[t]+g(l(!1))}function A(t){return P(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){o=e.Transition,r([ft,bt,yt,gt],E)},move:function(t,e,n,i){var r,s;t!==e&&(r=t>n,s=g(x(C(),r)),r?s>=0:s<=w[h("scrollWidth")]-R(b)[h("width")])&&(k(),L(x(C(),t>n),!0)),a(4),c(mt,e,n,t),o.start(e,(function(){a(3),c(pt,e,n,t),i&&i()}))},jump:S,translate:L,shift:x,cancel:k,toIndex:_,toPosition:P,getPosition:C,getLimit:A,exceededLimit:function(t,e){e=m(e)?C():e;var n=!0!==t&&g(e)<g(A(!1)),o=!1!==t&&g(e)>g(A(!0));return n||o},reposition:E}},Controller:function(t,e,n){var o,i,c,a,s=At(t),u=s.on,l=s.emit,d=e.Move,f=d.getPosition,p=d.getLimit,h=d.toPosition,g=e.Slides,y=g.isEnough,w=g.getLength,b=n.omitEnd,E=t.is(Te),S=t.is(Ae),L=r(A,!1),x=r(A,!0),k=n.start||0,_=k;function P(){i=w(!0),c=n.perMove,a=n.perPage,o=D();var t=ct(k,0,b?o:i-1);t!==k&&(k=t,d.reposition())}function C(){o!==D()&&l(Ct)}function A(t,e){var n=c||(O()?1:a),i=T(k+n*(t?-1:1),k,!(c||O()));return-1===i&&S&&!it(f(),p(!t),1)?t?0:o:e?i:M(i)}function T(e,r,s){if(y()||O()){var u=function(e){if(S&&"move"===n.trimSpace&&e!==k)for(var o=f();o===h(e,!0)&&rt(e,0,t.length-1,!n.rewind);)e<k?--e:++e;return e}(e);u!==e&&(r=e,e=u,s=!1),e<0||e>o?e=c||!rt(0,e,r,!0)&&!rt(o,r,e,!0)?E?s?e<0?-(i%a||a):i:e:n.rewind?e<0?o:0:-1:I(q(e)):s&&e!==r&&(e=I(q(r)+(e<r?-1:1)))}else e=-1;return e}function M(t){return E?(t+i)%i||0:t}function D(){for(var t=i-(O()||E&&c?1:a);b&&t-- >0;)if(h(i-1,!0)!==h(t,!0)){t++;break}return ct(t,0,i-1)}function I(t){return ct(O()?t:a*t,0,o)}function q(t){return O()?Z(t,o):et((t>=o?i-1:t)/a)}function N(t){t!==k&&(_=k,k=t)}function O(){return!m(n.focus)||n.isNavigation}function z(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){P(),u([yt,gt,Ct],P),u(bt,C)},go:function(t,e,n){if(!z()){var i=function(t){var e=k;if(v(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],i=n[1],r=n[2];"+"===i||"-"===i?e=T(k+ +(""+i+(+r||1)),k):">"===i?e=r?I(+r):L(!0):"<"===i&&(e=x(!0))}else e=E?t:ct(t,0,o);return e}(t),r=M(i);r>-1&&(e||r!==k)&&(N(r),d.move(i,r,_,n))}},scroll:function(t,n,i,r){e.Scroll.scroll(t,n,i,(function(){var t=M(d.toIndex(f()));N(b?Z(t,o):t),r&&r()}))},getNext:L,getPrev:x,getAdjacent:A,getEnd:D,setIndex:N,getIndex:function(t){return t?_:k},toIndex:I,toPage:q,toDest:function(t){var e=d.toIndex(t);return S?ct(e,0,o):e},hasFocus:O,isBusy:z}},Arrows:function(t,e,n){var o,i,c=At(t),a=c.on,s=c.bind,u=c.emit,l=n.classes,d=n.i18n,f=e.Elements,v=e.Controller,m=f.arrows,p=f.track,h=m,g=f.prev,y=f.next,w={};function b(){var t;!(t=n.arrows)||g&&y||(h=m||N("div",l.arrows),g=P(!0),y=P(!1),o=!0,L(h,[g,y]),!m&&x(h,p)),g&&y&&(T(w,{prev:g,next:y}),z(h,t?"":"none"),S(h,i=ae+"--"+n.direction),t&&(a([ft,pt,gt,St,Ct],C),s(y,"click",r(_,">")),s(g,"click",r(_,"<")),C(),q([g,y],Rt,p.id),u("arrows:mounted",g,y))),a(yt,E)}function E(){k(),b()}function k(){c.destroy(),$(h,i),o?(H(m?[g,y]:h),g=y=null):I([g,y],Jt)}function _(t){v.go(t,!0)}function P(t){return Y('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function C(){if(g&&y){var e=t.index,n=v.getPrev(),o=v.getNext(),i=n>-1&&e<n?d.last:d.prev,r=o>-1&&e>o?d.first:d.next;g.disabled=n<0,y.disabled=o<0,q(g,jt,i),q(y,jt,r),u("arrows:updated",g,y,n,o)}}return{arrows:w,mount:b,destroy:k,update:C}},Autoplay:function(t,e,n){var o,i,r=At(t),c=r.on,a=r.bind,s=r.emit,u=Tt(n.interval,t.go.bind(t,">"),(function(t){var e=d.bar;e&&O(e,"width",100*t+"%"),s("autoplay:playing",t)})),l=u.isPaused,d=e.Elements,f=e.Elements,v=f.root,m=f.toggle,p=n.autoplay,h="pause"===p;function g(){l()&&e.Slides.isEnough()&&(u.start(!n.resetProgress),i=o=h=!1,b(),s(kt))}function y(t){void 0===t&&(t=!0),h=!!t,b(),l()||(u.pause(),s(_t))}function w(){h||(o||i?y(!1):g())}function b(){m&&(E(m,ge,!h),q(m,jt,n.i18n[h?"play":"pause"]))}function S(t){var o=e.Slides.getAt(t);u.set(o&&+B(o.slide,De)||n.interval)}return{mount:function(){p&&(n.pauseOnHover&&a(v,"mouseenter mouseleave",(function(t){o="mouseenter"===t.type,w()})),n.pauseOnFocus&&a(v,"focusin focusout",(function(t){i="focusin"===t.type,w()})),m&&a(m,"click",(function(){h?g():y(!0)})),c([mt,Et,gt],u.rewind),c(mt,S),m&&q(m,Rt,d.track.id),h||g(),b())},destroy:u.cancel,play:g,pause:y,isPaused:l}},Cover:function(t,e,n){var o=At(t).on;function i(t){e.Slides.forEach((function(e){var n=P(e.container||e.slide,"img");n&&n.src&&c(t,n,e)}))}function c(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),z(e,t?"none":"")}return{mount:function(){n.cover&&(o(Pt,r(c,!0)),o([ft,yt,gt],r(i,!0)))},destroy:r(i,!1)}},Scroll:function(t,e,n){var o,i,c=At(t),a=c.on,s=c.emit,u=t.state.set,l=e.Move,d=l.getPosition,f=l.getLimit,v=l.exceededLimit,m=l.translate,p=t.is(Ae),h=1;function g(t,n,c,a,f){var m=d();if(b(),c&&(!p||!v())){var g=e.Layout.sliderSize(),E=at(t)*g*et(ot(t)/g)||0;t=l.toPosition(e.Controller.toDest(t%g))+E}var S=it(m,t,1);h=1,n=S?0:n||tt(ot(t-m)/1.5,800),i=a,o=Tt(n,y,r(w,m,t,f),1),u(5),s(Et),o.start()}function y(){u(3),i&&i(),s(St)}function w(t,e,o,r){var c,a,s=d(),u=(t+(e-t)*(c=r,(a=n.easingFunc)?a(c):1-Math.pow(1-c,4))-s)*h;m(s+u),p&&!o&&v()&&(h*=.6,ot(u)<10&&g(f(v(!0)),600,!1,i,!0))}function b(){o&&o.cancel()}function E(){o&&!o.isPaused()&&(b(),y())}return{mount:function(){a(mt,b),a([yt,gt],E)},destroy:b,scroll:g,cancel:E}},Drag:function(t,e,n){var o,i,r,c,s,u,d,f,v=At(t),m=v.on,p=v.emit,h=v.bind,g=v.unbind,y=t.state,w=e.Move,b=e.Scroll,E=e.Controller,S=e.Elements.track,L=e.Media.reduce,x=e.Direction,_=x.resolve,P=x.orient,C=w.getPosition,A=w.exceededLimit,T=!1;function M(){var t=n.drag;H(!t),c="free"===t}function D(t){if(u=!1,!d){var e=R(t);o=t.target,i=n.noDrag,k(o,"."+fe+", ."+se)||i&&k(o,i)||!e&&t.button||(E.isBusy()?j(t,!0):(f=e?S:window,s=y.is([4,5]),r=null,h(f,Pe,I,Ie),h(f,Ce,q,Ie),w.cancel(),b.cancel(),O(t)))}var o,i}function I(e){if(y.is(6)||(y.set(6),p("drag")),e.cancelable)if(s){w.translate(o+z(e)/(T&&t.is(Ae)?5:1));var i=W(e)>200,r=T!==(T=A());(i||r)&&O(e),u=!0,p("dragging"),j(e)}else(function(t){return ot(z(t))>ot(z(t,!0))})(e)&&(s=function(t){var e=n.dragMinThreshold,o=l(e),i=o&&e.mouse||0,r=(o?e.touch:+e)||10;return ot(z(t))>(R(t)?r:i)}(e),j(e))}function q(o){y.is(6)&&(y.set(3),p("dragged")),s&&(function(o){var i=function(e){if(t.is(Te)||!T){var n=W(e);if(n&&n<200)return z(e)/n}return 0}(o),r=function(t){return C()+at(t)*Z(ot(t)*(n.flickPower||600),c?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(i),a=n.rewind&&n.rewindByDrag;L(!1),c?E.scroll(r,0,n.snap):t.is(Me)?E.go(P(at(i))<0?a?"<":"-":a?">":"+"):t.is(Ae)&&T&&a?E.go(A(!0)?">":"<"):E.go(E.toDest(r),!0),L(!0)}(o),j(o)),g(f,Pe,I),g(f,Ce,q),s=!1}function N(t){!d&&u&&j(t,!0)}function O(t){r=i,i=t,o=C()}function z(t,e){return F(t,e)-F(B(t),e)}function W(t){return G(t)-G(B(t))}function B(t){return i===t&&r||i}function F(t,e){return(R(t)?t.changedTouches[0]:t)["page"+_(e?"Y":"X")]}function R(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function H(t){d=t}return{mount:function(){h(S,Pe,a,Ie),h(S,Ce,a,Ie),h(S,_e,D,Ie),h(S,"click",N,{capture:!0}),h(S,"dragstart",j),m([ft,yt],M)},disable:H,isDragging:function(){return s}}},Keyboard:function(t,e,n){var o,i,r=At(t),a=r.on,s=r.bind,u=r.unbind,l=t.root,d=e.Direction.resolve;function f(){var t=n.keyboard;t&&(o="global"===t?window:l,s(o,Oe,p))}function v(){u(o,Oe)}function m(){var t=i;i=!0,c((function(){i=t}))}function p(e){if(!i){var n=Ne(e);n===d(Dt)?t.go("<"):n===d(It)&&t.go(">")}}return{mount:function(){f(),a(yt,v),a(yt,f),a(mt,m)},destroy:v,disable:function(t){i=t}}},LazyLoad:function(t,e,n){var i=At(t),c=i.on,a=i.off,s=i.bind,u=i.emit,l="sequential"===n.lazyLoad,d=[pt,St],f=[];function v(){o(f),e.Slides.forEach((function(t){V(t.slide,Be).forEach((function(e){var o=B(e,ze),i=B(e,We);if(o!==e.src||i!==e.srcset){var r=n.classes.spinner,c=e.parentElement,a=P(c,"."+r)||N("span",r,c);f.push([e,t,a]),e.src||z(e,"none")}}))})),l?g():(a(d),c(d,m),m())}function m(){(f=f.filter((function(e){var o=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,o)||p(e)}))).length||a(d)}function p(t){var e=t[0];S(t[1].slide,Ee),s(e,"load error",r(h,t)),q(e,"src",B(e,ze)),q(e,"srcset",B(e,We)),I(e,ze),I(e,We)}function h(t,e){var n=t[0],o=t[1];$(o.slide,Ee),"error"!==e.type&&(H(t[2]),z(n,""),u(Pt,n,o),u(wt)),l&&g()}function g(){f.length&&p(f.shift())}return{mount:function(){n.lazyLoad&&(v(),c(gt,v))},destroy:r(o,f),check:m}},Pagination:function(t,e,n){var c,a,s=At(t),u=s.on,l=s.emit,d=s.bind,f=e.Slides,v=e.Elements,m=e.Controller,p=m.hasFocus,h=m.getIndex,g=m.go,y=e.Direction.resolve,w=v.pagination,b=[];function E(){c&&(H(w?i(c.children):c),$(c,a),o(b),c=null),s.destroy()}function L(t){g(">"+t,!0)}function x(t,e){var n=b.length,o=Ne(e),i=k(),r=-1;o===y(It,!1,i)?r=++t%n:o===y(Dt,!1,i)?r=(--t+n)%n:"Home"===o?r=0:"End"===o&&(r=n-1);var c=b[r];c&&(W(c.button),g(">"+r),j(e,!0))}function k(){return n.paginationDirection||n.direction}function _(t){return b[m.toPage(t)]}function P(){var t=_(h(!0)),e=_(h());if(t){var n=t.button;$(n,ge),I(n,Yt),q(n,Bt,-1)}if(e){var o=e.button;S(o,ge),q(o,Yt,!0),q(o,Bt,"")}l("pagination:updated",{list:c,items:b},t,e)}return{items:b,mount:function e(){E(),u([yt,gt,Ct],e);var o=n.pagination;w&&z(w,o?"":"none"),o&&(u([mt,Et,St],P),function(){var e=t.length,o=n.classes,i=n.i18n,s=n.perPage,u=p()?m.getEnd()+1:nt(e/s);S(c=w||N("ul",o.pagination,v.track.parentElement),a=de+"--"+k()),q(c,Wt,"tablist"),q(c,jt,i.select),q(c,$t,k()===Ot?"vertical":"");for(var l=0;l<u;l++){var h=N("li",null,c),g=N("button",{class:o.page,type:"button"},h),y=f.getIn(l).map((function(t){return t.slide.id})),E=!p()&&s>1?i.pageX:i.slideX;d(g,"click",r(L,l)),n.paginationKeyboard&&d(g,"keydown",r(x,l)),q(h,Wt,"presentation"),q(g,Wt,"tab"),q(g,Rt,y.join(" ")),q(g,jt,st(E,l+1)),q(g,Bt,-1),b.push({li:h,button:g,page:l})}}(),P(),l("pagination:mounted",{list:c,items:b},_(t.index)))},destroy:E,getAt:_,update:P}},Sync:function(t,e,n){var i=n.isNavigation,c=n.slideFocus,a=[];function s(){var e,n;t.splides.forEach((function(e){e.isParent||(l(t,e.splide),l(e.splide,t))})),i&&((n=(e=At(t)).on)(ht,f),n("sk",v),n([ft,yt],d),a.push(e),e.emit(xt,t.splides))}function u(){a.forEach((function(t){t.destroy()})),o(a)}function l(t,e){var n=At(t);n.on(mt,(function(t,n,o){e.go(e.is(Te)?o:t)})),a.push(n)}function d(){q(e.Elements.list,$t,n.direction===Ot?"vertical":"")}function f(e){t.go(e.index)}function v(t,e){w(Fe,Ne(e))&&(f(t),j(e))}return{setup:r(e.Media.set,{slideFocus:m(c)?i:c},!0),mount:s,destroy:u,remount:function(){u(),s()}}},Wheel:function(t,e,n){var o=At(t).bind,i=0;function r(o){if(o.cancelable){var r=o.deltaY,c=r<0,a=G(o),s=n.wheelMinThreshold||0,u=n.wheelSleep||0;ot(r)>s&&a-i>u&&(t.go(c?"<":">"),i=a),function(o){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(o)}(c)&&j(o)}}return{mount:function(){n.wheel&&o(e.Elements.track,"wheel",r,Ie)}}},Live:function(t,e,n){var o=At(t).on,i=e.Elements.track,c=n.live&&!n.isNavigation,a=N("span",pe),s=Tt(90,r(u,!1));function u(t){q(i,Kt,t),t?(L(i,a),s.start()):(H(a),s.cancel())}function l(t){c&&q(i,Ut,t?"off":"polite")}return{mount:function(){c&&(l(!e.Autoplay.isPaused()),q(i,Qt,!0),a.textContent="…",o(kt,r(l,!0)),o(_t,r(l,!1)),o([pt,St],r(u,!0)))},disable:l,destroy:function(){I(i,[Ut,Qt,Kt]),H(a)}}}}),He={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:ke,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Ye(t,e,n){var o=e.Slides;function i(){o.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){At(t).on([ft,gt],i)},start:function(t,e){o.style("transition","opacity "+n.speed+"ms "+n.easing),c(e)},cancel:a}}function je(t,e,n){var o,i=e.Move,c=e.Controller,a=e.Scroll,s=e.Elements.list,u=r(O,s,"transition");function l(){u(""),a.cancel()}return{mount:function(){At(t).bind(s,"transitionend",(function(t){t.target===s&&o&&(l(),o())}))},start:function(e,r){var s=i.toPosition(e,!0),l=i.getPosition(),d=function(e){var o=n.rewindSpeed;if(t.is(Ae)&&o){var i=c.getIndex(!0),r=c.getEnd();if(0===i&&e>=r||i>=r&&0===e)return o}return n.speed}(e);ot(s-l)>=1&&d>=1?n.useScroll?a.scroll(s,d,!1,r):(u("transform "+d+"ms "+n.easing),i.translate(s,!0),o=r):(i.jump(e),r())},cancel:l}}var Xe=function(){function e(t,n){var o;this.event=At(),this.Components={},this.state=(o=1,{set:function(t){o=t},is:function(t){return w(g(t),o)}}),this.splides=[],this._o={},this._E={};var i=v(t)?X(document,t):t;J(i,i+" is invalid."),this.root=i,n=M({label:B(i,jt)||"",labelledby:B(i,Xt)||""},He,e.defaults,n||{});try{M(n,JSON.parse(B(i,Q)))}catch(t){J(!1,"Invalid JSON")}this._o=Object.create(M({},n))}var n,r,c=e.prototype;return c.mount=function(t,e){var n=this,o=this.state,i=this.Components;return J(o.is([1,7]),"Already mounted!"),o.set(1),this._C=i,this._T=e||this._T||(this.is(Me)?Ye:je),this._E=t||this._E,A(T({},Re,this._E,{Transition:this._T}),(function(t,e){var o=t(n,i,n._o);i[e]=o,o.setup&&o.setup()})),A(i,(function(t){t.mount&&t.mount()})),this.emit(ft),S(this.root,he),o.set(3),this.emit(vt),this},c.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},c.go=function(t){return this._C.Controller.go(t),this},c.on=function(t,e){return this.event.on(t,e),this},c.off=function(t){return this.event.off(t),this},c.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(i(arguments,1))),this},c.add=function(t,e){return this._C.Slides.add(t,e),this},c.remove=function(t){return this._C.Slides.remove(t),this},c.is=function(t){return this._o.type===t},c.refresh=function(){return this.emit(gt),this},c.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?At(this).on(vt,this.destroy.bind(this,t)):(A(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(Lt),e.destroy(),t&&o(this.splides),n.set(7)),this},n=e,(r=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();Xe.defaults={},Xe.STATES=n;const Ve=t=>{document.querySelector(t)&&new Xe(t,{arrows:!1,pagination:!1,type:"loop",focus:"center",fixedWidth:140,fixedHeight:260,mediaQuery:"min",gap:12,breakpoints:{532:{fixedWidth:null,fixedHeight:null,perPage:3,focus:1},768:{fixedWidth:null,perPage:2,gap:24,focus:1},992:{perPage:3,gap:24,focus:1},1400:{perPage:4,gap:24,focus:1}}}).mount()},$e=t=>void 0===t||"auto"===t||"instant"===t||"smooth"===t;function Ge(t,e){this.scrollLeft=t,this.scrollTop=e}const Ue=(t,e,n="cannot convert to dictionary.")=>`Failed to execute '${t}' on '${e}': ${n}`,Ke=(t,e,n)=>Ue(t,e,`The provided value '${n}' is not a valid enum value of type ScrollBehavior.`),Qe=(t,e,n)=>{var o;const i=`__SEAMLESS.BACKUP$${e}`;return t[i]||!t[e]||(null===(o=t[e])||void 0===o?void 0:o.__isPolyfill)||(t[i]=t[e]),t[i]||n},Je=t=>t.ownerDocument.scrollingElement||t.ownerDocument.documentElement,Ze=t=>.5*(1-Math.cos(Math.PI*t));function tn(){var t;let e;return e=(null===(t=window.performance)||void 0===t?void 0:t.now)?()=>window.performance.now():()=>window.Date.now(),tn=e,e()}const en=t=>{const e=(tn()-t.timeStamp)/(t.duration||500);if(e>1)return t.method(t.targetX,t.targetY),void t.callback();const n=(t.timingFunc||Ze)(e),o=t.startX+(t.targetX-t.startX)*n,i=t.startY+(t.targetY-t.startY)*n;t.method(o,i),t.rafId=window.requestAnimationFrame((()=>{en(t)}))},nn=t=>isFinite(t)?Number(t):0,on=(t=>(e,n,o)=>{const[i,r]=(c=e).window===c?[Je(e.document.documentElement),"Window"]:[e,"Element"];var c;const a=null!=n?n:{};if(!(t=>{const e=typeof t;return null!==t&&("object"===e||"function"===e)})(a))throw new TypeError(Ue(t,r));if(!$e(a.behavior))throw new TypeError(Ke(t,r,a.behavior));"scrollBy"===t&&(a.left=nn(a.left)+i.scrollLeft,a.top=nn(a.top)+i.scrollTop),((t,e,n)=>{var o,i;if(!(t=>{var e;return null!==(e=t.isConnected)&&void 0!==e?e:!(t.ownerDocument&&1&t.ownerDocument.compareDocumentPosition(t))})(t))return;const r=t.scrollLeft,c=t.scrollTop,a=nn(null!==(o=e.left)&&void 0!==o?o:r),s=nn(null!==(i=e.top)&&void 0!==i?i:c);if(a===r&&s===c)return;const u=Qe(HTMLElement.prototype,"scroll",Ge),l=Qe(Object.getPrototypeOf(t),"scroll",u).bind(t);if("smooth"!==e.behavior)return void l(a,s);const d=()=>{window.removeEventListener("wheel",v),window.removeEventListener("touchmove",v)},f=Object.assign(Object.assign({},n),{timeStamp:tn(),startX:r,startY:c,targetX:a,targetY:s,rafId:0,method:l,callback:()=>{d();const e=9===t.nodeType;t.dispatchEvent(function(t){if("function"==typeof Event)return new Event("scrollend",{bubbles:t,cancelable:!1});const e=document.createEvent("Event");return e.initEvent("scrollend",t,!1),e}(e))}}),v=()=>{window.cancelAnimationFrame(f.rafId),d()};window.addEventListener("wheel",v,{passive:!0,once:!0}),window.addEventListener("touchmove",v,{passive:!0,once:!0}),en(f)})(i,a,o)})("scroll"),rn=t=>{switch(t){case"horizontal-tb":case"lr":case"lr-tb":case"rl":case"rl-tb":return 0;case"vertical-rl":case"tb":case"tb-rl":return 1;case"vertical-lr":case"tb-lr":return 2;case"sideways-rl":return 3;case"sideways-lr":return 4}return 0},cn=(t,e,n,o)=>{let i=0;switch(e||(i^=2),t){case 0:i=i>>1|(1&i)<<1,[n,o]=[o,n];break;case 1:case 3:i^=1;break;case 4:i^=2}return[i,n,o]},an=t=>1==(1&cn(rn(t.writingMode),"rtl"!==t.direction,void 0,void 0)[0]),sn=(t,e,n,o,i,r,c)=>0!==t?t:i<e&&r>n||i>e&&r<n?null:i<=e&&c<=o||r>=n&&c>=o?2:r>n&&c<o||i<e&&c>o?3:null,un=t=>"visible"!==t&&"clip"!==t,ln=(t,e)=>(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth)&&(un(e.overflowY)||un(e.overflowX)||t===Je(t)),dn=t=>{const e=t.parentNode,n=t.parentElement;if(null===n&&null!==e){if(11===e.nodeType)return e.host;if(9===e.nodeType)return(t=>{var e;try{return(null===(e=t.ownerDocument.defaultView)||void 0===e?void 0:e.frameElement)||null}catch(t){return null}})(t)}return n},fn=(t,e,n)=>t<e?e:t>n?n:t,vn=(t,e,n)=>{switch(t){case 1:return(e+n)/2;case 3:return n;case 2:case 0:return e}},mn=(t,e)=>{var n,o,i;const r=null===(n=t.ownerDocument.defaultView)||void 0===n?void 0:n.visualViewport,[c,a,s,u]=t===Je(t)?[0,0,null!==(o=null==r?void 0:r.width)&&void 0!==o?o:t.clientWidth,null!==(i=null==r?void 0:r.height)&&void 0!==i?i:t.clientHeight]:[e.left,e.top,t.clientWidth,t.clientHeight],l=c+t.clientLeft,d=a+t.clientTop;return[d,l+s,d+u,l]},pn=(t,e,n)=>{const o=e||{};if(!$e(o.behavior))throw new TypeError(Ke("scrollIntoView","Element",o.behavior));((t,e)=>{const n=[];let o=t.ownerDocument,i=o.defaultView;if(!i)return n;const r=window.getComputedStyle(t),c="rtl"!==r.direction,a=rn(r.writingMode||r.getPropertyValue("-webkit-writing-mode")||r.getPropertyValue("-ms-writing-mode")),[s,u]=((t,e,n)=>{const[o,i,r]=cn(e,n,t.block||"start",t.inline||"nearest");return[i,r].map(((t,e)=>{switch(t){case"center":return 1;case"nearest":return 0;default:return"start"===t==!(o>>e&1)?2:3}}))})(e,a,c);let[l,d,f,v]=((t,e,n)=>{const{top:o,right:i,bottom:r,left:c}=e,a=(s=t.ownerDocument,["scroll-margin","scroll-snap-margin"].filter((t=>t in s.documentElement.style))[0]);var s;if(!a)return[o,i,r,c];const u=t=>{const e=n.getPropertyValue(`${a}-${t}`);return parseInt(e,10)||0};return[o-u("top"),i+u("right"),r+u("bottom"),c-u("left")]})(t,t.getBoundingClientRect(),r);for(let r=dn(t);null!==r;r=dn(r)){if(o!==r.ownerDocument){if(o=r.ownerDocument,i=o.defaultView,!i)break;const{left:t,top:e}=r.getBoundingClientRect();l+=e,d+=t,f+=e,v+=t}const t=i.getComputedStyle(r);if("fixed"===t.position)break;if(!ln(r,t))continue;const c=r.getBoundingClientRect(),[a,m,p,h]=mn(r,c),g=sn(s,h,m,r.clientWidth,v,d,d-v),y=sn(u,a,p,r.clientHeight,l,f,f-l),w=null===g?0:vn(g,v,d)-vn(g,h,m),b=null===y?0:vn(y,l,f)-vn(y,a,p),E=an(t)?fn(w,-r.scrollWidth+r.clientWidth-r.scrollLeft,-r.scrollLeft):fn(w,-r.scrollLeft,r.scrollWidth-r.clientWidth-r.scrollLeft),S=fn(b,-r.scrollTop,r.scrollHeight-r.clientHeight-r.scrollTop);n.push([r,{left:r.scrollLeft+E,top:r.scrollTop+S,behavior:e.behavior}]),l=Math.max(l-S,a),d=Math.min(d-E,m),f=Math.min(f-S,p),v=Math.max(v-E,h)}return n})(t,o).forEach((([t,e])=>{on(t,e,n)}))},hn=(t,e)=>e[t%100>4&&t%100<20?2:[2,0,1,1,1,2][t%10<5?t%10:5]];var gn=!1;if("undefined"!=typeof window){var yn={get passive(){gn=!0}};window.addEventListener("testPassive",null,yn),window.removeEventListener("testPassive",null,yn)}var wn="undefined"!=typeof window&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||"MacIntel"===window.navigator.platform&&window.navigator.maxTouchPoints>1),bn=[],En=!1,Sn=-1,Ln=void 0,xn=void 0,kn=void 0,_n=function(t){return bn.some((function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))}))},Pn=function(t){var e=t||window.event;return!!_n(e.target)||e.touches.length>1||(e.preventDefault&&e.preventDefault(),!1)};(()=>{const t=document.querySelector(".header__navbar_select"),e=t.querySelectorAll("li");t&&t.addEventListener("click",(()=>{t.classList.toggle("open")})),e.forEach((t=>{t.addEventListener("click",(()=>{const n=t.dataset.language;e.forEach((t=>{t.classList.remove("active"),t.dataset.language===n&&t.classList.add("active")}))}))}))})(),(()=>{const t=document.querySelector(".header__navbar_search-input--wrapper"),e=document.getElementById("header-search-button"),n=document.getElementById("header-search-close");e.addEventListener("click",(()=>{t.classList.add("-active")})),n.addEventListener("click",(()=>{t.classList.remove("-active")}))})(),((t=4e3)=>{const e=document.querySelector(".hero-wrapper"),n=document.querySelector(".hero__slider_tabs");if(e){const o=e.querySelectorAll(".hero__image");let i,r,c=e.querySelectorAll(".hero-tab"),a=0;r=new Xe(".hero__slider_tabs--slider",{arrows:!1,pagination:!1,type:"loop",focus:"center",autoWidth:!0,mediaQuery:"min",gap:12,breakpoints:{992:{destroy:!0}}}).mount();const s=t=>{c=e.querySelectorAll(".hero-tab"),o.forEach(((e,n)=>{e.classList.remove("active"),n===t&&e.classList.add("active")})),c.forEach(((e,n)=>{e.classList.remove("active"),Number(e.dataset.slideIdx)===t&&e.classList.add("active")})),r&&!r.options.destroy&&r.go(t)},u=()=>{i=setInterval((()=>{4===a?a=0:a++,s(a)}),t)},l=()=>{u()},d=()=>{clearInterval(i)};n.addEventListener("click",(t=>{if(t.target.closest(".hero-tab")){const e=t.target.closest(".hero-tab"),n=Number(e.dataset.slideIdx);a=n,s(n),d(),l()}})),s(a),u()}})(),Ve(".products-slider"),Ve(".new-products-slider"),document.querySelector(".our-time__slider")&&new Xe(".our-time__slider",{arrows:!1,pagination:!1,clones:0,type:"loop",focus:"center",gap:24,breakpoints:{767:{destroy:!0}}}).mount(),(()=>{const t=document.querySelector(".hero"),e=document.querySelector(".btn-catalog");if(e){let n,o=!1;new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?e.classList.remove("animate-opacity"):e.classList.add("animate-opacity")}))}),{threshold:0}).observe(t),window.addEventListener("scroll",(()=>{clearTimeout(n),o||(e.style.opacity=.5,o=!0),n=setTimeout((()=>{e.style.opacity=1,o=!1}),500)}))}})(),document.querySelectorAll(".header-menu__item a").forEach((t=>{t.addEventListener("click",(e=>{e.preventDefault();const n=t.getAttribute("href").substring(1),o=document.getElementById(n);o&&pn(o,{behavior:"smooth",block:"start"})}))})),(()=>{const t=document.querySelector(".catalog__slider_tabs"),e=document.getElementById("catalog-category__title");if(t){let n,o=t.querySelectorAll(".catalog-tab"),i=0;n=new Xe(".catalog__slider_tabs--slider",{arrows:!1,pagination:!1,clones:0,autoWidth:!0,mediaQuery:"min",start:i,padding:{left:12,right:12},gap:12,breakpoints:{992:{destroy:!0}}}).mount();const r=i=>{o=t.querySelectorAll(".catalog-tab"),o.forEach(((t,o)=>{const r=Number(t.dataset.slideIdx);if(t.classList.remove("active"),r===i){const o=t.dataset.title;t.classList.add("active"),n&&!n.options.destroy&&n.go(r),e&&(e.textContent=o)}}))};t.addEventListener("click",(t=>{if(t.target.closest(".catalog-tab")){const e=t.target.closest(".catalog-tab"),n=Number(e.dataset.slideIdx);i=n,r(n)}})),r(i)}})(),(()=>{const t=document.querySelector(".search");if(t){const e=t.querySelectorAll(".product-card"),n=t.querySelector(".search-description"),o=Number(e.length),i=hn(o,["найден","найдено","найдены"]),r=hn(o,["результат","результата","результатов"]);n.textContent=`${i} ${o} ${r}`}})(),(()=>{const t=document.getElementById("map");t&&async function(){let e,n=window.ymaps3;await n.ready;const{YMap:o,YMapDefaultSchemeLayer:i,YMapDefaultFeaturesLayer:r,YMapMarker:c}=n;e=new o(t,{location:{center:[46.00891089556499,51.57077959379591],zoom:17},behaviors:["drag","pinchZoom","mouseTilt"]},[new i({}),new r({})]);const a=document.createElement("img");a.className="contacts-map--icon-marker",a.style.width="89px",a.style.height="117px",a.style.position="relative",a.style.transform="translate(-50%, -50%)",a.src="./images/icons/marker.png",e.addChild(new c({coordinates:[46.00829728258972,51.57158353822383]},a))}()})(),(()=>{const t=document.querySelector(".timeline");if(t){const e=[...t.querySelectorAll(".timeline-item"),document.querySelector(".our-time-title")];let n=document.body.getBoundingClientRect(),o=!0,i=0;const r=()=>{const t=document.body.getBoundingClientRect();o=!(t.y>n.y),n=document.body.getBoundingClientRect(),e.forEach(((t,n)=>{const r=t.getBoundingClientRect();r&&r.y>0&&r.y<document.documentElement.clientHeight/2?(o?(n>i&&(i=n),t.classList.remove("-active")):(n<i&&(i=n),t.classList.remove("-active")),e[i].classList.add("-active")):t.classList.remove("-active")}))};document.addEventListener("scroll",r),r()}})(),(()=>{const t=document.querySelectorAll(".feedback-btn"),e=document.querySelector(".feedback-modal-overlay");if(e){const n=e.querySelector(".feedback-modal__close");t.forEach((t=>{t.addEventListener("click",(()=>{e.style.display="flex",setTimeout((()=>e.classList.add("-active"))),function(t,e){if(t){if(!bn.some((function(e){return e.targetElement===t}))){var n={targetElement:t,options:e||{}};bn=[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(bn),[n]),wn?window.requestAnimationFrame((function(){if(void 0===xn){xn={position:document.body.style.position,top:document.body.style.top,left:document.body.style.left};var t=window,e=t.scrollY,n=t.scrollX,o=t.innerHeight;document.body.style.position="fixed",document.body.style.top=-e,document.body.style.left=-n,setTimeout((function(){return window.requestAnimationFrame((function(){var t=o-window.innerHeight;t&&e>=o&&(document.body.style.top=-(e+t))}))}),300)}})):function(t){if(void 0===kn){var e=!!t&&!0===t.reserveScrollBarGap,n=window.innerWidth-document.documentElement.clientWidth;if(e&&n>0){var o=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right"),10);kn=document.body.style.paddingRight,document.body.style.paddingRight=o+n+"px"}}void 0===Ln&&(Ln=document.body.style.overflow,document.body.style.overflow="hidden")}(e),wn&&(t.ontouchstart=function(t){1===t.targetTouches.length&&(Sn=t.targetTouches[0].clientY)},t.ontouchmove=function(e){1===e.targetTouches.length&&function(t,e){var n=t.targetTouches[0].clientY-Sn;!_n(t.target)&&(e&&0===e.scrollTop&&n>0||function(t){return!!t&&t.scrollHeight-t.scrollTop<=t.clientHeight}(e)&&n<0?Pn(t):t.stopPropagation())}(e,t)},En||(document.addEventListener("touchmove",Pn,gn?{passive:!1}:void 0),En=!0))}}else console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.")}(document.body)}))})),n.addEventListener("click",(()=>{e.classList.remove("-active"),setTimeout((()=>e.style.display=null),200),document.body,wn&&(bn.forEach((function(t){t.targetElement.ontouchstart=null,t.targetElement.ontouchmove=null})),En&&(document.removeEventListener("touchmove",Pn,gn?{passive:!1}:void 0),En=!1),Sn=-1),wn?function(){if(void 0!==xn){var t=-parseInt(document.body.style.top,10),e=-parseInt(document.body.style.left,10);document.body.style.position=xn.position,document.body.style.top=xn.top,document.body.style.left=xn.left,window.scrollTo(e,t),xn=void 0}}():(void 0!==kn&&(document.body.style.paddingRight=kn,kn=void 0),void 0!==Ln&&(document.body.style.overflow=Ln,Ln=void 0)),bn=[]}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,