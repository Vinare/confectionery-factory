/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var n="(prefers-reduced-motion: reduce)",e={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function i(t){t.length=0}function r(t,n,e){return Array.prototype.slice.call(t,n,e)}function o(t){return t.bind.apply(t,[null].concat(r(arguments,1)))}var u=setTimeout,a=function(){};function s(t){return requestAnimationFrame(t)}function c(t,n){return typeof n===t}function l(t){return!h(t)&&c("object",t)}var f=Array.isArray,d=o(c,"function"),v=o(c,"string"),p=o(c,"undefined");function h(t){return null===t}function g(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function m(t){return f(t)?t:[t]}function y(t,n){m(t).forEach(n)}function b(t,n){return t.indexOf(n)>-1}function w(t,n){return t.push.apply(t,m(n)),t}function E(t,n,e){t&&y(n,(function(n){n&&t.classList[e?"add":"remove"](n)}))}function S(t,n){E(t,v(n)?n.split(" "):n,!0)}function x(t,n){y(n,t.appendChild.bind(t))}function L(t,n){y(t,(function(t){var e=(n||t).parentNode;e&&e.insertBefore(t,n)}))}function k(t,n){return g(t)&&(t.msMatchesSelector||t.matches).call(t,n)}function P(t,n){var e=t?r(t.children):[];return n?e.filter((function(t){return k(t,n)})):e}function _(t,n){return n?P(t,n)[0]:t.firstElementChild}var C=Object.keys;function A(t,n,e){return t&&(e?C(t).reverse():C(t)).forEach((function(e){"__proto__"!==e&&n(t[e],e)})),t}function D(t){return r(arguments,1).forEach((function(n){A(n,(function(e,i){t[i]=n[i]}))})),t}function M(t){return r(arguments,1).forEach((function(n){A(n,(function(n,e){f(n)?t[e]=n.slice():l(n)?t[e]=M({},l(t[e])?t[e]:{},n):t[e]=n}))})),t}function I(t,n){y(n||C(t),(function(n){delete t[n]}))}function z(t,n){y(t,(function(t){y(n,(function(n){t&&t.removeAttribute(n)}))}))}function N(t,n,e){l(n)?A(n,(function(n,e){N(t,e,n)})):y(t,(function(t){h(e)||""===e?z(t,n):t.setAttribute(n,String(e))}))}function O(t,n,e){var i=document.createElement(t);return n&&(v(n)?S(i,n):N(i,n)),e&&x(e,i),i}function T(t,n,e){if(p(e))return getComputedStyle(t)[n];h(e)||(t.style[n]=""+e)}function F(t,n){T(t,"display",n)}function j(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function R(t,n){return t.getAttribute(n)}function W(t,n){return t&&t.classList.contains(n)}function q(t){return t.getBoundingClientRect()}function X(t){y(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function B(t){return _((new DOMParser).parseFromString(t,"text/html").body)}function G(t,n){t.preventDefault(),n&&(t.stopPropagation(),t.stopImmediatePropagation())}function H(t,n){return t&&t.querySelector(n)}function Y(t,n){return n?r(t.querySelectorAll(n)):[]}function U(t,n){E(t,n,!1)}function K(t){return t.timeStamp}function Q(t){return v(t)?t:t?t+"px":""}var J="splide",V="data-"+J;function Z(t,n){if(!t)throw new Error("["+J+"] "+(n||""))}var $=Math.min,tt=Math.max,nt=Math.floor,et=Math.ceil,it=Math.abs;function rt(t,n,e){return it(t-n)<e}function ot(t,n,e,i){var r=$(n,e),o=tt(n,e);return i?r<t&&t<o:r<=t&&t<=o}function ut(t,n,e){var i=$(n,e),r=tt(n,e);return $(tt(i,t),r)}function at(t){return+(t>0)-+(t<0)}function st(t,n){return y(n,(function(n){t=t.replace("%s",""+n)})),t}function ct(t){return t<10?"0"+t:""+t}var lt={};function ft(){var t=[];function n(t,n,e){y(t,(function(t){t&&y(n,(function(n){n.split(" ").forEach((function(n){var i=n.split(".");e(t,i[0],i[1])}))}))}))}return{bind:function(e,i,r,o){n(e,i,(function(n,e,i){var u="addEventListener"in n,a=u?n.removeEventListener.bind(n,e,r,o):n.removeListener.bind(n,r);u?n.addEventListener(e,r,o):n.addListener(r),t.push([n,e,i,r,a])}))},unbind:function(e,i,r){n(e,i,(function(n,e,i){t=t.filter((function(t){return!!(t[0]!==n||t[1]!==e||t[2]!==i||r&&t[3]!==r)||(t[4](),!1)}))}))},dispatch:function(t,n,e){var i;return"function"==typeof CustomEvent?i=new CustomEvent(n,{bubbles:!0,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(n,!0,!1,e),t.dispatchEvent(i),i},destroy:function(){t.forEach((function(t){t[4]()})),i(t)}}}var dt="mounted",vt="ready",pt="move",ht="moved",gt="click",mt="refresh",yt="updated",bt="resize",wt="resized",Et="scroll",St="scrolled",xt="destroy",Lt="navigation:mounted",kt="autoplay:play",Pt="autoplay:pause",_t="lazyload:loaded",Ct="ei";function At(t){var n=t?t.event.bus:document.createDocumentFragment(),e=ft();return t&&t.event.on(xt,e.destroy),D(e,{bus:n,on:function(t,i){e.bind(n,m(t).join(" "),(function(t){i.apply(i,f(t.detail)?t.detail:[])}))},off:o(e.unbind,n),emit:function(t){e.dispatch(n,t,r(arguments,1))}})}function Dt(t,n,e,i){var r,o,u=Date.now,a=0,c=!0,l=0;function f(){if(!c){if(a=t?$((u()-r)/t,1):1,e&&e(a),a>=1&&(n(),r=u(),i&&++l>=i))return d();o=s(f)}}function d(){c=!0}function v(){o&&cancelAnimationFrame(o),a=0,o=0,c=!0}return{start:function(n){n||v(),r=u()-(n?a*t:0),c=!1,o=s(f)},rewind:function(){r=u(),a=0,e&&e(a)},pause:d,cancel:v,set:function(n){t=n},isPaused:function(){return c}}}var Mt="Arrow",It=Mt+"Left",zt=Mt+"Right",Nt=Mt+"Up",Ot=Mt+"Down",Tt="ttb",Ft={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Nt,zt],ArrowRight:[Ot,It]};var jt="role",Rt="tabindex",Wt="aria-",qt=Wt+"controls",Xt=Wt+"current",Bt=Wt+"selected",Gt=Wt+"label",Ht=Wt+"labelledby",Yt=Wt+"hidden",Ut=Wt+"orientation",Kt=Wt+"roledescription",Qt=Wt+"live",Jt=Wt+"busy",Vt=Wt+"atomic",Zt=[jt,Rt,"disabled",qt,Xt,Gt,Ht,Yt,Ut,Kt],$t=J+"__",tn="is-",nn=J,en=$t+"track",rn=$t+"list",on=$t+"slide",un=on+"--clone",an=on+"__container",sn=$t+"arrows",cn=$t+"arrow",ln=cn+"--prev",fn=cn+"--next",dn=$t+"pagination",vn=dn+"__page",pn=$t+"progress__bar",hn=$t+"toggle",gn=$t+"sr",mn=tn+"initialized",yn=tn+"active",bn=tn+"prev",wn=tn+"next",En=tn+"visible",Sn=tn+"loading",xn=tn+"focus-in",Ln=tn+"overflow",kn=[yn,En,bn,wn,Sn,xn,Ln],Pn={slide:on,clone:un,arrows:sn,arrow:cn,prev:ln,next:fn,pagination:dn,page:vn,spinner:$t+"spinner"},_n="touchstart mousedown",Cn="touchmove mousemove",An="touchend touchcancel mouseup click",Dn="slide",Mn="loop",In="fade";var zn=V+"-interval",Nn={passive:!1,capture:!0},On={Spacebar:" ",Right:zt,Left:It,Up:Nt,Down:Ot};function Tn(t){return t=v(t)?t:t.key,On[t]||t}var Fn="keydown",jn=V+"-lazy",Rn=jn+"-srcset",Wn="["+jn+"], ["+Rn+"]",qn=[" ","Enter"],Xn=Object.freeze({__proto__:null,Media:function(t,e,i){var r=t.state,o=i.breakpoints||{},u=i.reducedMotion||{},a=ft(),s=[];function c(t){t&&a.destroy()}function l(t,n){var e=matchMedia(n);a.bind(e,"change",f),s.push([t,e])}function f(){var n=r.is(7),e=i.direction,o=s.reduce((function(t,n){return M(t,n[1].matches?n[0]:{})}),{});I(i),d(o),i.destroy?t.destroy("completely"===i.destroy):n?(c(!0),t.mount()):e!==i.direction&&t.refresh()}function d(n,e,o){M(i,n),e&&M(Object.getPrototypeOf(i),n),!o&&r.is(1)||t.emit(yt,i)}return{setup:function(){var t="min"===i.mediaQuery;C(o).sort((function(n,e){return t?+n-+e:+e-+n})).forEach((function(n){l(o[n],"("+(t?"min":"max")+"-width:"+n+"px)")})),l(u,n),f()},destroy:c,reduce:function(t){matchMedia(n).matches&&(t?M(i,u):I(i,C(u)))},set:d}},Direction:function(t,n,e){return{resolve:function(t,n,i){var r="rtl"!==(i=i||e.direction)||n?i===Tt?0:-1:1;return Ft[t]&&Ft[t][r]||t.replace(/width|left|right/i,(function(t,n){var e=Ft[t.toLowerCase()][r]||t;return n>0?e.charAt(0).toUpperCase()+e.slice(1):e}))},orient:function(t){return t*("rtl"===e.direction?1:-1)}}},Elements:function(t,n,e){var r,o,u,a=At(t),s=a.on,c=a.bind,l=t.root,f=e.i18n,v={},p=[],h=[],g=[];function m(){var t,n,i;r=x("."+en),o=_(r,"."+rn),Z(r&&o,"A track/list element is missing."),w(p,P(o,"."+on+":not(."+un+")")),A({arrows:sn,pagination:dn,prev:ln,next:fn,bar:pn,toggle:hn},(function(t,n){v[n]=x("."+t)})),D(v,{root:l,track:r,list:o,slides:p}),n=l.id||""+(t=J)+ct(lt[t]=(lt[t]||0)+1),i=e.role,l.id=n,r.id=r.id||n+"-track",o.id=o.id||n+"-list",!R(l,jt)&&"SECTION"!==l.tagName&&i&&N(l,jt,i),N(l,Kt,f.carousel),N(o,jt,"presentation"),b()}function y(t){var n=Zt.concat("style");i(p),U(l,h),U(r,g),z([r,o],n),z(l,t?n:["style",Kt])}function b(){U(l,h),U(r,g),h=L(nn),g=L(en),S(l,h),S(r,g),N(l,Gt,e.label),N(l,Ht,e.labelledby)}function x(t){var n=H(l,t);return n&&function(t,n){if(d(t.closest))return t.closest(n);for(var e=t;e&&1===e.nodeType&&!k(e,n);)e=e.parentElement;return e}(n,"."+nn)===l?n:void 0}function L(t){return[t+"--"+e.type,t+"--"+e.direction,e.drag&&t+"--draggable",e.isNavigation&&t+"--nav",t===nn&&yn]}return D(v,{setup:m,mount:function(){s(mt,y),s(mt,m),s(yt,b),c(document,_n+" keydown",(function(t){u="keydown"===t.type}),{capture:!0}),c(l,"focusin",(function(){E(l,xn,!!u)}))},destroy:y})},Slides:function(t,n,e){var r=At(t),u=r.on,a=r.emit,s=r.bind,c=n.Elements,l=c.slides,f=c.list,p=[];function h(){l.forEach((function(t,n){P(t,n,-1)}))}function w(){A((function(t){t.destroy()})),i(p)}function P(n,e,i){var r=function(t,n,e,i){var r,u=At(t),a=u.on,s=u.emit,c=u.bind,l=t.Components,f=t.root,d=t.options,v=d.isNavigation,p=d.updateOnMove,h=d.i18n,g=d.pagination,m=d.slideFocus,y=l.Direction.resolve,b=R(i,"style"),w=R(i,Gt),S=e>-1,x=_(i,"."+an);function L(){var r=t.splides.map((function(t){var e=t.splide.Components.Slides.getAt(n);return e?e.slide.id:""})).join(" ");N(i,Gt,st(h.slideX,(S?e:n)+1)),N(i,qt,r),N(i,jt,m?"button":""),m&&z(i,Kt)}function k(){r||P()}function P(){if(!r){var e=t.index;(o=C())!==W(i,yn)&&(E(i,yn,o),N(i,Xt,v&&o||""),s(o?"active":"inactive",A)),function(){var n=function(){if(t.is(In))return C();var n=q(l.Elements.track),e=q(i),r=y("left",!0),o=y("right",!0);return nt(n[r])<=et(e[r])&&nt(e[o])<=et(n[o])}(),e=!n&&(!C()||S);if(t.state.is([4,5])||N(i,Yt,e||""),N(Y(i,d.focusableNodes||""),Rt,e?-1:""),m&&N(i,Rt,e?-1:0),n!==W(i,En)&&(E(i,En,n),s(n?"visible":"hidden",A)),!n&&document.activeElement===i){var r=l.Slides.getAt(t.index);r&&j(r.slide)}}(),E(i,bn,n===e-1),E(i,wn,n===e+1)}var o}function C(){var i=t.index;return i===n||d.cloneStatus&&i===e}var A={index:n,slideIndex:e,slide:i,container:x,isClone:S,mount:function(){S||(i.id=f.id+"-slide"+ct(n+1),N(i,jt,g?"tabpanel":"group"),N(i,Kt,h.slide),N(i,Gt,w||st(h.slideLabel,[n+1,t.length]))),c(i,"click",o(s,gt,A)),c(i,"keydown",o(s,"sk",A)),a([ht,"sh",St],P),a(Lt,L),p&&a(pt,k)},destroy:function(){r=!0,u.destroy(),U(i,kn),z(i,Zt),N(i,"style",b),N(i,Gt,w||"")},update:P,style:function(t,n,e){T(e&&x||i,t,n)},isWithin:function(e,i){var r=it(e-n);return S||!d.rewind&&!t.is(Mn)||(r=$(r,t.length-r)),r<=i}};return A}(t,e,i,n);r.mount(),p.push(r),p.sort((function(t,n){return t.index-n.index}))}function C(t){return t?D((function(t){return!t.isClone})):p}function A(t,n){C(n).forEach(t)}function D(t){return p.filter(d(t)?t:function(n){return v(t)?k(n.slide,t):b(m(t),n.index)})}return{mount:function(){h(),u(mt,w),u(mt,h)},destroy:w,update:function(){A((function(t){t.update()}))},register:P,get:C,getIn:function(t){var i=n.Controller,r=i.toIndex(t),o=i.hasFocus()?1:e.perPage;return D((function(t){return ot(t.index,r,r+o-1)}))},getAt:function(t){return D(t)[0]},add:function(t,n){y(t,(function(t){if(v(t)&&(t=B(t)),g(t)){var i=l[n];i?L(t,i):x(f,t),S(t,e.classes.slide),r=t,u=o(a,bt),c=Y(r,"img"),(d=c.length)?c.forEach((function(t){s(t,"load error",(function(){--d||u()}))})):u()}var r,u,c,d})),a(mt)},remove:function(t){X(D(t).map((function(t){return t.slide}))),a(mt)},forEach:A,filter:D,style:function(t,n,e){A((function(i){i.style(t,n,e)}))},getLength:function(t){return t?l.length:p.length},isEnough:function(){return p.length>e.perPage}}},Layout:function(t,n,e){var i,r,u,a=At(t),s=a.on,c=a.bind,f=a.emit,d=n.Slides,v=n.Direction.resolve,p=n.Elements,h=p.root,g=p.track,m=p.list,y=d.getAt,b=d.style;function w(){i=e.direction===Tt,T(h,"maxWidth",Q(e.width)),T(g,v("paddingLeft"),x(!1)),T(g,v("paddingRight"),x(!0)),S(!0)}function S(t){var n,o=q(h);(t||r.width!==o.width||r.height!==o.height)&&(T(g,"height",(n="",i&&(Z(n=L(),"height or heightRatio is missing."),n="calc("+n+" - "+x(!1)+" - "+x(!0)+")"),n)),b(v("marginRight"),Q(e.gap)),b("width",e.autoWidth?null:Q(e.fixedWidth)||(i?"":k())),b("height",Q(e.fixedHeight)||(i?e.autoHeight?null:k():L()),!0),r=o,f(wt),u!==(u=M())&&(E(h,Ln,u),f("overflow",u)))}function x(t){var n=e.padding,i=v(t?"right":"left");return n&&Q(n[i]||(l(n)?0:n))||"0px"}function L(){return Q(e.height||q(m).width*e.heightRatio)}function k(){var t=Q(e.gap);return"calc((100%"+(t&&" + "+t)+")/"+(e.perPage||1)+(t&&" - "+t)+")"}function P(){return q(m)[v("width")]}function _(t,n){var e=y(t||0);return e?q(e.slide)[v("width")]+(n?0:D()):0}function C(t,n){var e=y(t);if(e){var i=q(e.slide)[v("right")],r=q(m)[v("left")];return it(i-r)+(n?0:D())}return 0}function A(n){return C(t.length-1)-C(0)+_(0,n)}function D(){var t=y(0);return t&&parseFloat(T(t.slide,v("marginRight")))||0}function M(){return t.is(In)||A(!0)>P()}return{mount:function(){var t,n;w(),c(window,"resize load",(t=o(f,bt),n=Dt(0,t,null,1),function(){n.isPaused()&&n.start()})),s([yt,mt],w),s(bt,S)},resize:S,listSize:P,slideSize:_,sliderSize:A,totalSize:C,getPadding:function(t){return parseFloat(T(g,v("padding"+(t?"Right":"Left"))))||0},isOverflow:M}},Clones:function(t,n,e){var r,o=At(t),u=o.on,a=n.Elements,s=n.Slides,c=n.Direction.resolve,l=[];function f(){u(mt,d),u([yt,bt],h),(r=g())&&(function(n){var i=s.get().slice(),r=i.length;if(r){for(;i.length<n;)w(i,i);w(i.slice(-n),i.slice(0,n)).forEach((function(o,u){var c=u<n,f=function(n,i){var r=n.cloneNode(!0);return S(r,e.classes.clone),r.id=t.root.id+"-clone"+ct(i+1),r}(o.slide,u);c?L(f,i[0].slide):x(a.list,f),w(l,f),s.register(f,u-n+(c?0:r),o.index)}))}}(r),n.Layout.resize(!0))}function d(){v(),f()}function v(){X(l),i(l),o.destroy()}function h(){var t=g();r!==t&&(r<t||!t)&&o.emit(mt)}function g(){var i=e.clones;if(t.is(Mn)){if(p(i)){var r=e[c("fixedWidth")]&&n.Layout.slideSize(0);i=r&&et(q(a.track)[c("width")]/r)||e[c("autoWidth")]&&t.length||2*e.perPage}}else i=0;return i}return{mount:f,destroy:v}},Move:function(t,n,e){var i,r=At(t),o=r.on,u=r.emit,a=t.state.set,s=n.Layout,c=s.slideSize,l=s.getPadding,f=s.totalSize,d=s.listSize,v=s.sliderSize,h=n.Direction,g=h.resolve,m=h.orient,y=n.Elements,b=y.list,w=y.track;function E(){n.Controller.isBusy()||(n.Scroll.cancel(),S(t.index),n.Slides.update())}function S(t){x(_(t,!0))}function x(e,i){if(!t.is(In)){var r=i?e:function(e){if(t.is(Mn)){var i=P(e),r=i>n.Controller.getEnd();(i<0||r)&&(e=L(e,r))}return e}(e);T(b,"transform","translate"+g("X")+"("+r+"px)"),e!==r&&u("sh")}}function L(t,n){var e=t-A(n),i=v();return t-m(i*(et(it(e)/i)||1))*(n?1:-1)}function k(){x(C(),!0),i.cancel()}function P(t){for(var e=n.Slides.get(),i=0,r=1/0,o=0;o<e.length;o++){var u=e[o].index,a=it(_(u,!0)-t);if(!(a<=r))break;r=a,i=u}return i}function _(n,i){var r=m(f(n-1)-function(t){var n=e.focus;return"center"===n?(d()-c(t,!0))/2:+n*c(t)||0}(n));return i?function(n){return e.trimSpace&&t.is(Dn)&&(n=ut(n,0,m(v(!0)-d()))),n}(r):r}function C(){var t=g("left");return q(b)[t]-q(w)[t]+m(l(!1))}function A(t){return _(t?n.Controller.getEnd():0,!!e.trimSpace)}return{mount:function(){i=n.Transition,o([dt,wt,yt,mt],E)},move:function(t,n,e,r){var o,s;t!==n&&(o=t>e,s=m(L(C(),o)),o?s>=0:s<=b[g("scrollWidth")]-q(w)[g("width")])&&(k(),x(L(C(),t>e),!0)),a(4),u(pt,n,e,t),i.start(n,(function(){a(3),u(ht,n,e,t),r&&r()}))},jump:S,translate:x,shift:L,cancel:k,toIndex:P,toPosition:_,getPosition:C,getLimit:A,exceededLimit:function(t,n){n=p(n)?C():n;var e=!0!==t&&m(n)<m(A(!1)),i=!1!==t&&m(n)>m(A(!0));return e||i},reposition:E}},Controller:function(t,n,e){var i,r,u,a,s=At(t),c=s.on,l=s.emit,f=n.Move,d=f.getPosition,h=f.getLimit,g=f.toPosition,m=n.Slides,y=m.isEnough,b=m.getLength,w=e.omitEnd,E=t.is(Mn),S=t.is(Dn),x=o(A,!1),L=o(A,!0),k=e.start||0,P=k;function _(){r=b(!0),u=e.perMove,a=e.perPage,i=I();var t=ut(k,0,w?i:r-1);t!==k&&(k=t,f.reposition())}function C(){i!==I()&&l(Ct)}function A(t,n){var e=u||(T()?1:a),r=D(k+e*(t?-1:1),k,!(u||T()));return-1===r&&S&&!rt(d(),h(!t),1)?t?0:i:n?r:M(r)}function D(n,o,s){if(y()||T()){var c=function(n){if(S&&"move"===e.trimSpace&&n!==k)for(var i=d();i===g(n,!0)&&ot(n,0,t.length-1,!e.rewind);)n<k?--n:++n;return n}(n);c!==n&&(o=n,n=c,s=!1),n<0||n>i?n=u||!ot(0,n,o,!0)&&!ot(i,o,n,!0)?E?s?n<0?-(r%a||a):r:n:e.rewind?n<0?i:0:-1:z(N(n)):s&&n!==o&&(n=z(N(o)+(n<o?-1:1)))}else n=-1;return n}function M(t){return E?(t+r)%r||0:t}function I(){for(var t=r-(T()||E&&u?1:a);w&&t-- >0;)if(g(r-1,!0)!==g(t,!0)){t++;break}return ut(t,0,r-1)}function z(t){return ut(T()?t:a*t,0,i)}function N(t){return T()?$(t,i):nt((t>=i?r-1:t)/a)}function O(t){t!==k&&(P=k,k=t)}function T(){return!p(e.focus)||e.isNavigation}function F(){return t.state.is([4,5])&&!!e.waitForTransition}return{mount:function(){_(),c([yt,mt,Ct],_),c(wt,C)},go:function(t,n,e){if(!F()){var r=function(t){var n=k;if(v(t)){var e=t.match(/([+\-<>])(\d+)?/)||[],r=e[1],o=e[2];"+"===r||"-"===r?n=D(k+ +(""+r+(+o||1)),k):">"===r?n=o?z(+o):x(!0):"<"===r&&(n=L(!0))}else n=E?t:ut(t,0,i);return n}(t),o=M(r);o>-1&&(n||o!==k)&&(O(o),f.move(r,o,P,e))}},scroll:function(t,e,r,o){n.Scroll.scroll(t,e,r,(function(){var t=M(f.toIndex(d()));O(w?$(t,i):t),o&&o()}))},getNext:x,getPrev:L,getAdjacent:A,getEnd:I,setIndex:O,getIndex:function(t){return t?P:k},toIndex:z,toPage:N,toDest:function(t){var n=f.toIndex(t);return S?ut(n,0,i):n},hasFocus:T,isBusy:F}},Arrows:function(t,n,e){var i,r,u=At(t),a=u.on,s=u.bind,c=u.emit,l=e.classes,f=e.i18n,d=n.Elements,v=n.Controller,p=d.arrows,h=d.track,g=p,m=d.prev,y=d.next,b={};function w(){var t;!(t=e.arrows)||m&&y||(g=p||O("div",l.arrows),m=_(!0),y=_(!1),i=!0,x(g,[m,y]),!p&&L(g,h)),m&&y&&(D(b,{prev:m,next:y}),F(g,t?"":"none"),S(g,r=sn+"--"+e.direction),t&&(a([dt,ht,mt,St,Ct],C),s(y,"click",o(P,">")),s(m,"click",o(P,"<")),C(),N([m,y],qt,h.id),c("arrows:mounted",m,y))),a(yt,E)}function E(){k(),w()}function k(){u.destroy(),U(g,r),i?(X(p?[m,y]:g),m=y=null):z([m,y],Zt)}function P(t){v.go(t,!0)}function _(t){return B('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(e.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function C(){if(m&&y){var n=t.index,e=v.getPrev(),i=v.getNext(),r=e>-1&&n<e?f.last:f.prev,o=i>-1&&n>i?f.first:f.next;m.disabled=e<0,y.disabled=i<0,N(m,Gt,r),N(y,Gt,o),c("arrows:updated",m,y,e,i)}}return{arrows:b,mount:w,destroy:k,update:C}},Autoplay:function(t,n,e){var i,r,o=At(t),u=o.on,a=o.bind,s=o.emit,c=Dt(e.interval,t.go.bind(t,">"),(function(t){var n=f.bar;n&&T(n,"width",100*t+"%"),s("autoplay:playing",t)})),l=c.isPaused,f=n.Elements,d=n.Elements,v=d.root,p=d.toggle,h=e.autoplay,g="pause"===h;function m(){l()&&n.Slides.isEnough()&&(c.start(!e.resetProgress),r=i=g=!1,w(),s(kt))}function y(t){void 0===t&&(t=!0),g=!!t,w(),l()||(c.pause(),s(Pt))}function b(){g||(i||r?y(!1):m())}function w(){p&&(E(p,yn,!g),N(p,Gt,e.i18n[g?"play":"pause"]))}function S(t){var i=n.Slides.getAt(t);c.set(i&&+R(i.slide,zn)||e.interval)}return{mount:function(){h&&(e.pauseOnHover&&a(v,"mouseenter mouseleave",(function(t){i="mouseenter"===t.type,b()})),e.pauseOnFocus&&a(v,"focusin focusout",(function(t){r="focusin"===t.type,b()})),p&&a(p,"click",(function(){g?m():y(!0)})),u([pt,Et,mt],c.rewind),u(pt,S),p&&N(p,qt,f.track.id),g||m(),w())},destroy:c.cancel,play:m,pause:y,isPaused:l}},Cover:function(t,n,e){var i=At(t).on;function r(t){n.Slides.forEach((function(n){var e=_(n.container||n.slide,"img");e&&e.src&&u(t,e,n)}))}function u(t,n,e){e.style("background",t?'center/cover no-repeat url("'+n.src+'")':"",!0),F(n,t?"none":"")}return{mount:function(){e.cover&&(i(_t,o(u,!0)),i([dt,yt,mt],o(r,!0)))},destroy:o(r,!1)}},Scroll:function(t,n,e){var i,r,u=At(t),a=u.on,s=u.emit,c=t.state.set,l=n.Move,f=l.getPosition,d=l.getLimit,v=l.exceededLimit,p=l.translate,h=t.is(Dn),g=1;function m(t,e,u,a,d){var p=f();if(w(),u&&(!h||!v())){var m=n.Layout.sliderSize(),E=at(t)*m*nt(it(t)/m)||0;t=l.toPosition(n.Controller.toDest(t%m))+E}var S=rt(p,t,1);g=1,e=S?0:e||tt(it(t-p)/1.5,800),r=a,i=Dt(e,y,o(b,p,t,d),1),c(5),s(Et),i.start()}function y(){c(3),r&&r(),s(St)}function b(t,n,i,o){var u,a,s=f(),c=(t+(n-t)*(u=o,(a=e.easingFunc)?a(u):1-Math.pow(1-u,4))-s)*g;p(s+c),h&&!i&&v()&&(g*=.6,it(c)<10&&m(d(v(!0)),600,!1,r,!0))}function w(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(w(),y())}return{mount:function(){a(pt,w),a([yt,mt],E)},destroy:w,scroll:m,cancel:E}},Drag:function(t,n,e){var i,r,o,u,s,c,f,d,v=At(t),p=v.on,h=v.emit,g=v.bind,m=v.unbind,y=t.state,b=n.Move,w=n.Scroll,E=n.Controller,S=n.Elements.track,x=n.Media.reduce,L=n.Direction,P=L.resolve,_=L.orient,C=b.getPosition,A=b.exceededLimit,D=!1;function M(){var t=e.drag;X(!t),u="free"===t}function I(t){if(c=!1,!f){var n=q(t);i=t.target,r=e.noDrag,k(i,"."+vn+", ."+cn)||r&&k(i,r)||!n&&t.button||(E.isBusy()?G(t,!0):(d=n?S:window,s=y.is([4,5]),o=null,g(d,Cn,z,Nn),g(d,An,N,Nn),b.cancel(),w.cancel(),T(t)))}var i,r}function z(n){if(y.is(6)||(y.set(6),h("drag")),n.cancelable)if(s){b.translate(i+F(n)/(D&&t.is(Dn)?5:1));var r=j(n)>200,o=D!==(D=A());(r||o)&&T(n),c=!0,h("dragging"),G(n)}else(function(t){return it(F(t))>it(F(t,!0))})(n)&&(s=function(t){var n=e.dragMinThreshold,i=l(n),r=i&&n.mouse||0,o=(i?n.touch:+n)||10;return it(F(t))>(q(t)?o:r)}(n),G(n))}function N(i){y.is(6)&&(y.set(3),h("dragged")),s&&(function(i){var r=function(n){if(t.is(Mn)||!D){var e=j(n);if(e&&e<200)return F(n)/e}return 0}(i),o=function(t){return C()+at(t)*$(it(t)*(e.flickPower||600),u?1/0:n.Layout.listSize()*(e.flickMaxPages||1))}(r),a=e.rewind&&e.rewindByDrag;x(!1),u?E.scroll(o,0,e.snap):t.is(In)?E.go(_(at(r))<0?a?"<":"-":a?">":"+"):t.is(Dn)&&D&&a?E.go(A(!0)?">":"<"):E.go(E.toDest(o),!0),x(!0)}(i),G(i)),m(d,Cn,z),m(d,An,N),s=!1}function O(t){!f&&c&&G(t,!0)}function T(t){o=r,r=t,i=C()}function F(t,n){return W(t,n)-W(R(t),n)}function j(t){return K(t)-K(R(t))}function R(t){return r===t&&o||r}function W(t,n){return(q(t)?t.changedTouches[0]:t)["page"+P(n?"Y":"X")]}function q(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function X(t){f=t}return{mount:function(){g(S,Cn,a,Nn),g(S,An,a,Nn),g(S,_n,I,Nn),g(S,"click",O,{capture:!0}),g(S,"dragstart",G),p([dt,yt],M)},disable:X,isDragging:function(){return s}}},Keyboard:function(t,n,e){var i,r,o=At(t),a=o.on,s=o.bind,c=o.unbind,l=t.root,f=n.Direction.resolve;function d(){var t=e.keyboard;t&&(i="global"===t?window:l,s(i,Fn,h))}function v(){c(i,Fn)}function p(){var t=r;r=!0,u((function(){r=t}))}function h(n){if(!r){var e=Tn(n);e===f(It)?t.go("<"):e===f(zt)&&t.go(">")}}return{mount:function(){d(),a(yt,v),a(yt,d),a(pt,p)},destroy:v,disable:function(t){r=t}}},LazyLoad:function(t,n,e){var r=At(t),u=r.on,a=r.off,s=r.bind,c=r.emit,l="sequential"===e.lazyLoad,f=[ht,St],d=[];function v(){i(d),n.Slides.forEach((function(t){Y(t.slide,Wn).forEach((function(n){var i=R(n,jn),r=R(n,Rn);if(i!==n.src||r!==n.srcset){var o=e.classes.spinner,u=n.parentElement,a=_(u,"."+o)||O("span",o,u);d.push([n,t,a]),n.src||F(n,"none")}}))})),l?m():(a(f),u(f,p),p())}function p(){(d=d.filter((function(n){var i=e.perPage*((e.preloadPages||1)+1)-1;return!n[1].isWithin(t.index,i)||h(n)}))).length||a(f)}function h(t){var n=t[0];S(t[1].slide,Sn),s(n,"load error",o(g,t)),N(n,"src",R(n,jn)),N(n,"srcset",R(n,Rn)),z(n,jn),z(n,Rn)}function g(t,n){var e=t[0],i=t[1];U(i.slide,Sn),"error"!==n.type&&(X(t[2]),F(e,""),c(_t,e,i),c(bt)),l&&m()}function m(){d.length&&h(d.shift())}return{mount:function(){e.lazyLoad&&(v(),u(mt,v))},destroy:o(i,d),check:p}},Pagination:function(t,n,e){var u,a,s=At(t),c=s.on,l=s.emit,f=s.bind,d=n.Slides,v=n.Elements,p=n.Controller,h=p.hasFocus,g=p.getIndex,m=p.go,y=n.Direction.resolve,b=v.pagination,w=[];function E(){u&&(X(b?r(u.children):u),U(u,a),i(w),u=null),s.destroy()}function x(t){m(">"+t,!0)}function L(t,n){var e=w.length,i=Tn(n),r=k(),o=-1;i===y(zt,!1,r)?o=++t%e:i===y(It,!1,r)?o=(--t+e)%e:"Home"===i?o=0:"End"===i&&(o=e-1);var u=w[o];u&&(j(u.button),m(">"+o),G(n,!0))}function k(){return e.paginationDirection||e.direction}function P(t){return w[p.toPage(t)]}function _(){var t=P(g(!0)),n=P(g());if(t){var e=t.button;U(e,yn),z(e,Bt),N(e,Rt,-1)}if(n){var i=n.button;S(i,yn),N(i,Bt,!0),N(i,Rt,"")}l("pagination:updated",{list:u,items:w},t,n)}return{items:w,mount:function n(){E(),c([yt,mt,Ct],n);var i=e.pagination;b&&F(b,i?"":"none"),i&&(c([pt,Et,St],_),function(){var n=t.length,i=e.classes,r=e.i18n,s=e.perPage,c=h()?p.getEnd()+1:et(n/s);S(u=b||O("ul",i.pagination,v.track.parentElement),a=dn+"--"+k()),N(u,jt,"tablist"),N(u,Gt,r.select),N(u,Ut,k()===Tt?"vertical":"");for(var l=0;l<c;l++){var g=O("li",null,u),m=O("button",{class:i.page,type:"button"},g),y=d.getIn(l).map((function(t){return t.slide.id})),E=!h()&&s>1?r.pageX:r.slideX;f(m,"click",o(x,l)),e.paginationKeyboard&&f(m,"keydown",o(L,l)),N(g,jt,"presentation"),N(m,jt,"tab"),N(m,qt,y.join(" ")),N(m,Gt,st(E,l+1)),N(m,Rt,-1),w.push({li:g,button:m,page:l})}}(),_(),l("pagination:mounted",{list:u,items:w},P(t.index)))},destroy:E,getAt:P,update:_}},Sync:function(t,n,e){var r=e.isNavigation,u=e.slideFocus,a=[];function s(){var n,e;t.splides.forEach((function(n){n.isParent||(l(t,n.splide),l(n.splide,t))})),r&&((e=(n=At(t)).on)(gt,d),e("sk",v),e([dt,yt],f),a.push(n),n.emit(Lt,t.splides))}function c(){a.forEach((function(t){t.destroy()})),i(a)}function l(t,n){var e=At(t);e.on(pt,(function(t,e,i){n.go(n.is(Mn)?i:t)})),a.push(e)}function f(){N(n.Elements.list,Ut,e.direction===Tt?"vertical":"")}function d(n){t.go(n.index)}function v(t,n){b(qn,Tn(n))&&(d(t),G(n))}return{setup:o(n.Media.set,{slideFocus:p(u)?r:u},!0),mount:s,destroy:c,remount:function(){c(),s()}}},Wheel:function(t,n,e){var i=At(t).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,u=o<0,a=K(i),s=e.wheelMinThreshold||0,c=e.wheelSleep||0;it(o)>s&&a-r>c&&(t.go(u?"<":">"),r=a),function(i){return!e.releaseWheel||t.state.is(4)||-1!==n.Controller.getAdjacent(i)}(u)&&G(i)}}return{mount:function(){e.wheel&&i(n.Elements.track,"wheel",o,Nn)}}},Live:function(t,n,e){var i=At(t).on,r=n.Elements.track,u=e.live&&!e.isNavigation,a=O("span",gn),s=Dt(90,o(c,!1));function c(t){N(r,Jt,t),t?(x(r,a),s.start()):(X(a),s.cancel())}function l(t){u&&N(r,Qt,t?"off":"polite")}return{mount:function(){u&&(l(!n.Autoplay.isPaused()),N(r,Vt,!0),a.textContent="…",i(kt,o(l,!0)),i(Pt,o(l,!1)),i([ht,St],o(c,!0)))},disable:l,destroy:function(){z(r,[Qt,Vt,Jt]),X(a)}}}}),Bn={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Pn,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Gn(t,n,e){var i=n.Slides;function r(){i.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){At(t).on([dt,mt],r)},start:function(t,n){i.style("transition","opacity "+e.speed+"ms "+e.easing),u(n)},cancel:a}}function Hn(t,n,e){var i,r=n.Move,u=n.Controller,a=n.Scroll,s=n.Elements.list,c=o(T,s,"transition");function l(){c(""),a.cancel()}return{mount:function(){At(t).bind(s,"transitionend",(function(t){t.target===s&&i&&(l(),i())}))},start:function(n,o){var s=r.toPosition(n,!0),l=r.getPosition(),f=function(n){var i=e.rewindSpeed;if(t.is(Dn)&&i){var r=u.getIndex(!0),o=u.getEnd();if(0===r&&n>=o||r>=o&&0===n)return i}return e.speed}(n);it(s-l)>=1&&f>=1?e.useScroll?a.scroll(s,f,!1,o):(c("transform "+f+"ms "+e.easing),r.translate(s,!0),i=o):(r.jump(n),o())},cancel:l}}var Yn=function(){function n(t,e){var i;this.event=At(),this.Components={},this.state=(i=1,{set:function(t){i=t},is:function(t){return b(m(t),i)}}),this.splides=[],this._o={},this._E={};var r=v(t)?H(document,t):t;Z(r,r+" is invalid."),this.root=r,e=M({label:R(r,Gt)||"",labelledby:R(r,Ht)||""},Bn,n.defaults,e||{});try{M(e,JSON.parse(R(r,V)))}catch(t){Z(!1,"Invalid JSON")}this._o=Object.create(M({},e))}var e,o,u=n.prototype;return u.mount=function(t,n){var e=this,i=this.state,r=this.Components;return Z(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=n||this._T||(this.is(In)?Gn:Hn),this._E=t||this._E,A(D({},Xn,this._E,{Transition:this._T}),(function(t,n){var i=t(e,r,e._o);r[n]=i,i.setup&&i.setup()})),A(r,(function(t){t.mount&&t.mount()})),this.emit(dt),S(this.root,mn),i.set(3),this.emit(vt),this},u.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},u.go=function(t){return this._C.Controller.go(t),this},u.on=function(t,n){return this.event.on(t,n),this},u.off=function(t){return this.event.off(t),this},u.emit=function(t){var n;return(n=this.event).emit.apply(n,[t].concat(r(arguments,1))),this},u.add=function(t,n){return this._C.Slides.add(t,n),this},u.remove=function(t){return this._C.Slides.remove(t),this},u.is=function(t){return this._o.type===t},u.refresh=function(){return this.emit(mt),this},u.destroy=function(t){void 0===t&&(t=!0);var n=this.event,e=this.state;return e.is(1)?At(this).on(vt,this.destroy.bind(this,t)):(A(this._C,(function(n){n.destroy&&n.destroy(t)}),!0),n.emit(xt),n.destroy(),t&&i(this.splides),e.set(7)),this},e=n,(o=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&t(e.prototype,o),Object.defineProperty(e,"prototype",{writable:!1}),n}();Yn.defaults={},Yn.STATES=e;const Un=t=>{document.querySelector(t)&&new Yn(t,{arrows:!1,pagination:!1,type:"loop",focus:"center",fixedWidth:140,fixedHeight:260,mediaQuery:"min",gap:12,breakpoints:{532:{fixedWidth:null,fixedHeight:null,perPage:3,focus:1},768:{fixedWidth:null,perPage:2,gap:24,focus:1},992:{perPage:3,gap:24,focus:1},1400:{perPage:4,gap:24,focus:1}}}).mount()};(()=>{const t=document.querySelector(".header__navbar_select"),n=t.querySelectorAll("li");t&&t.addEventListener("click",(()=>{t.classList.toggle("open")})),n.forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.language;n.forEach((t=>{t.classList.remove("active"),t.dataset.language===e&&t.classList.add("active")}))}))}))})(),(()=>{const t=document.querySelector(".header__navbar_search-input--wrapper"),n=document.getElementById("header-search-button"),e=document.getElementById("header-search-close");n.addEventListener("click",(()=>{t.classList.add("-active")})),e.addEventListener("click",(()=>{t.classList.remove("-active")}))})(),((t=4e3)=>{const n=document.querySelector(".hero-wrapper"),e=document.querySelector(".hero__slider_tabs");if(n){const i=n.querySelectorAll(".hero__image");let r,o,u=n.querySelectorAll(".hero-tab"),a=0;o=new Yn(".splide",{arrows:!1,pagination:!1,type:"loop",focus:"center",autoWidth:!0,mediaQuery:"min",gap:12,breakpoints:{992:{destroy:!0}}}).mount();const s=t=>{u=n.querySelectorAll(".hero-tab"),i.forEach(((n,e)=>{n.classList.remove("active"),e===t&&n.classList.add("active")})),u.forEach(((n,e)=>{n.classList.remove("active"),Number(n.dataset.slideIdx)===t&&n.classList.add("active")})),o&&!o.options.destroy&&o.go(t)},c=()=>{r=setInterval((()=>{console.log(a),4===a?a=0:a++,s(a)}),t)},l=()=>{c()},f=()=>{clearInterval(r)};e.addEventListener("click",(t=>{if(t.target.closest(".hero-tab")){const n=t.target.closest(".hero-tab"),e=Number(n.dataset.slideIdx);a=e,s(e),f(),l()}})),s(a),c()}})(),Un(".products-slider"),Un(".new-products-slider"),new Yn(".our-time__slider",{arrows:!1,pagination:!1,clones:0,type:"loop",focus:"center",gap:24,breakpoints:{767:{destroy:!0}}}).mount()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,